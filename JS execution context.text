Javascript Execution context- Environment where the JS code executed.
There are three tuypes of execution context:
1. Global Execution context
2. Function Execution context
3. Eval Execution context

How JS code executed?
- It runs in two phases
1. Memeory creaton phase(creation phase):
Only the memory alocation will be done.

2. Execution phase

cycle 1: It contain two phase

Allocation phase

step1. Global execution or global environment
All the code will run through global execution and the code will allocated to the this keyword.

ste2. Memory phase
All veriable are allocated and the undefined value will assigned to them.


Exmaple:
let val1= 10;
let val2 =5;

function addNum(num1, num2){

    let total = num1 + num2;
    return total;
}

let reuslt1 = addNum(val1,val2);
let result2=addNum(10,2)

val1= undefined;
val2= undefined;
addNum= defination
result1= undefined;
result2= undefined;

cycle 2:

Execution phase:
Execution process will start with allting the executional values to the veriable.

val1 = 10;
val2 = 5;

addNum, the function defination will be skiped as it already done in memory phase.

result1 = addNum -> here, addNum is a function it will create a new execution context.
New execution context contain new veriable environment and executional thread.
this process will repeat whenever a function is called.

Memeory phase:
val1= undefined;
val2 = undefined;
total = undefined;

Execution phase:

num1= 10;
num2= 5;
total= 15;

And the total return to global executional context.
New execution context will be deleted after the cycle completion or when the output (return value) returned to the global executional context.



Memory stack follows the LIFO method: Last in first out.